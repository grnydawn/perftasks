Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.1.132 Build 20161005

Compiler options: -I/glade/u/apps/ch/opt/netcdf/4.4.1.1/intel/17.0.1/include -I/glade/u/apps/ch/os/usr/include -O3 -qopt-report=5 -o sum.exe -L/glade/u/apps/opt/intel/2017u1/compilers_and_libraries/linux/lib/intel64_lin -L/glade/u/apps/ch/os/usr/lib64 -L/opt/sgi/mpt/mpt-2.15/lib -L/glade/u/apps/ch/os/lib64 -L/glade/u/apps/ch/os/usr/lib -L/glade/u/apps/ch/opt/netcdf/4.4.1.1/intel/17.0.1/lib -L/glade/u/apps/ch/os/lib -Wl,--disable-new-dtags -Wl,-rpath,/glade/u/apps/opt/intel/2017u1/compilers_and_libraries/linux/lib/intel64_lin -Wl,-rpath,/glade/u/apps/ch/os/usr/lib64 -Wl,-rpath,/opt/sgi/mpt/mpt-2.15/lib -Wl,-rpath,/glade/u/apps/ch/os/lib64 -Wl,-rpath,/glade/u/apps/ch/os/usr/lib -Wl,-rpath,/glade/u/apps/ch/opt/netcdf/4.4.1.1/intel/17.0.1/lib -Wl,-rpath,/glade/u/apps/ch/os/lib -Wl,-Bstatic -lnetcdff -lnetcdf -lhdf5hl_fortran -lhdf5_hl -lhdf5_fortran -lhdf5 -lsz -lz -Wl,-Bdynamic

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: true
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: SUMMATION

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SUMMATION) [1/1=100.0%] sum.f90(1,9)
  -> EXTERN: (1,9) for_set_reentrancy
  -> EXTERN: (12,5) for_write_seq_lis_xmit
  -> EXTERN: (12,5) for_write_seq_lis


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at sum.f90(7,9)
   remark #25444: Loopnest Interchanged: ( 1 2 ) --> ( 2 1 )
   remark #25440: unrolled and jammed by 2   (pre-vector) 
   remark #15542: loop was not vectorized: inner loop was already vectorized   [ sum.f90(7,9) ]

   LOOP BEGIN at sum.f90(6,5)
      remark #15388: vectorization support: reference c(i) has aligned access   [ sum.f90(8,13) ]
      remark #15388: vectorization support: reference a(i) has aligned access   [ sum.f90(8,20) ]
      remark #15388: vectorization support: reference b(i) has aligned access   [ sum.f90(8,27) ]
      remark #15388: vectorization support: reference c(i) has aligned access   [ sum.f90(8,13) ]
      remark #15388: vectorization support: reference a(i) has aligned access   [ sum.f90(8,20) ]
      remark #15388: vectorization support: reference b(i) has aligned access   [ sum.f90(8,27) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.214
      remark #15301: PERMUTED LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 4 
      remark #15449: unmasked aligned unit stride stores: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 19 
      remark #15477: vector cost: 3.500 
      remark #15478: estimated potential speedup: 5.420 
      remark #15488: --- end vector cost summary ---
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 4
      remark #25015: Estimate of max trip count of loop=4096
   LOOP END
LOOP END

LOOP BEGIN at sum.f90(7,9)
<Remainder>
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at sum.f90(6,5)
      remark #15388: vectorization support: reference c(i) has aligned access   [ sum.f90(8,13) ]
      remark #15388: vectorization support: reference a(i) has aligned access   [ sum.f90(8,20) ]
      remark #15388: vectorization support: reference b(i) has aligned access   [ sum.f90(8,27) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.107
      remark #15301: PERMUTED LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 9 
      remark #15477: vector cost: 1.750 
      remark #15478: estimated potential speedup: 5.140 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=2048
   LOOP END
LOOP END

LOOP BEGIN at sum.f90(12,24)
   remark #15388: vectorization support: reference c(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 8
   remark #15309: vectorization support: normalized vectorization overhead 0.775
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1024
LOOP END

    Report from: Code generation optimizations [cg]

sum.f90(1,9):remark #34051: REGISTER ALLOCATION : [MAIN__] sum.f90:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rsi rdi r8 zmm0-zmm7]
        
    Routine temporaries
        Total         :      60
            Global    :      20
            Local     :      40
        Regenerable   :      21
        Spilled       :       0
        
    Routine stack
        Variables     :      92 bytes*
            Reads     :       2 [2.00e+00 ~ 0.0%]
            Writes    :       6 [6.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
